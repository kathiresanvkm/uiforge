{
  "version": 3,
  "sources": ["../../../../../apps/uiforge/uiforge/public/js/custom_list_view.js", "../../../../../apps/uiforge/uiforge/public/js/custom_form_view.js", "../../../../../apps/uiforge/uiforge/public/js/workflow.js", "../../../../../apps/uiforge/uiforge/public/js/theme.js", "../../../../../apps/uiforge/uiforge/public/js/custom_sidebar.js", "../../../../../apps/uiforge/uiforge/public/js/select_language.js"],
  "sourcesContent": ["$(document).on('app_ready', function() {\n    $.each([\"Opportunity\", \"Quotation\", \"Supplier Quotation\", \n        \"Sales Invoice\", \"Delivery Note\", \"Sales Order\",\n        \"Purchase Invoice\", \"Purchase Receipt\", \"Purchase Order\"], function(i, doctype) {\n            frappe.listview_settings[doctype] = {\n                onload: function (listview) {\n                    // Logic to execute when the List View is loaded\n                    console.log(doctype + \" List View Loaded\");\n        \n                    // Example: Add a custom button in the List View\n                    listview.page.add_inner_button(__('Custom Action'), function () {\n                        frappe.msgprint(__('Custom Action executed for ' + doctype));\n                    });\n                }\n            }\n                \n            \n            \n    });\n});", "$(document).on('app_ready', function () {\n    const doctypes = frappe.boot.get_doctypes;\n    // frappe.ui.form.controller\n    console.log(doctypes)\n    $.each(doctypes, function (i, doctype) {\n        frappe.ui.form.on(doctype, {\n            refresh: function (frm) {\n                // Hide standard buttons and actions\n                $(\".menu-btn-group\").hide();\n                $(\".actions-btn-group\").hide();\n                $(\".standard-actions.flex\").hide();\n                $(\"button[data-original-title=Print]\").hide();\n\n                // Remove a specific button and add a 'Back' button\n                frm.remove_custom_button('Quotation', 'Get Items From');\n                frm.add_custom_button(__('Back'), function () {\n                    frappe.set_route('List', doctype);\n                }).css({\n                    \"color\": \"white\",\n                    \"background-color\": \"#c2c2d6\",\n                    \"font-weight\": \"800\"\n                });\n\n                // Add help box for mandatory fields with errors\n                setTimeout(() => {\n                    updateOrAddHelpBoxForErrors(frm);\n                }, 50);\n            }\n        });\n    });\n});\n\nfunction updateOrAddHelpBoxForErrors(frm) {\n    // Find all mandatory fields in the form\n    const errorFields = frm.fields_dict;\n\n    Object.values(errorFields).forEach(field => {\n        if (field.df.reqd) {\n            const wrapper = field.wrapper.querySelector('.control-input-wrapper');\n            if (wrapper) {\n                let helpBox = wrapper.querySelector('.help-box');\n                \n                if (helpBox) {\n                    helpBox.textContent = 'This field is mandatory and must be filled correctly.';\n                    helpBox.style.color = 'red'; // Highlight error message\n                } else {\n                    helpBox = document.createElement('p');\n                    helpBox.className = 'help-box small text-muted';\n                    helpBox.textContent = 'This field is mandatory and must be filled correctly.';\n                    helpBox.style.color = 'red'; // Highlight error message\n                    helpBox.style.fontSize = '12px';\n                    wrapper.appendChild(helpBox);\n                }\n            }\n        }\n    });\n}\n", "// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors\n// MIT License. See license.txt\n\nclass WorkflowOverride extends frappe.ui.form.States {\n    show_actions() {\n        var added = false;\n        var me = this;\n\n        // If the loaded doc is dirty, don't show workflow buttons\n        if (this.frm.doc.__unsaved === 1) {\n            return;\n        }\n\n        function has_approval_access(transition) {\n            let approval_access = false;\n            const user = frappe.session.user;\n            if (\n                user === \"Administrator\" ||\n                transition.allow_self_approval ||\n                user !== me.frm.doc.owner\n            ) {\n                approval_access = true;\n            }\n            return approval_access;\n        }\n\n        frappe.workflow.get_transitions(this.frm.doc).then((transitions) => {\n            this.frm.page.clear_actions_menu();\n            transitions.forEach((d) => {\n                if (frappe.user_roles.includes(d.allowed) && has_approval_access(d)) {\n                    added = true;\n\t\t\t\t\tconsole.log(d);\n                    me.frm.add_custom_button(__(d.action), function () {\n                        // Set the workflow_action for use in form scripts\n                        console.log(d, me.frm.doc);\n                    }).addClass(\"btn-success\").removeClass(\"btn-default\"); // Group under 'Workflow Action\n                }\n            });\n\n            this.setup_btn(added);\n        });\n    }\n}\n\nfrappe.ui.form.States = WorkflowOverride;\n\n\n// frappe.ui.form.States = class FormStates {\n// \tconstructor(opts) {\n// \t\t$.extend(this, opts);\n// \t\tthis.state_fieldname = frappe.workflow.get_state_fieldname(this.frm.doctype);\n\n// \t\t// no workflow?\n// \t\tif (!this.state_fieldname) return;\n\n// \t\tthis.update_fields = frappe.workflow.get_update_fields(this.frm.doctype);\n\n// \t\tvar me = this;\n// \t\t$(this.frm.wrapper).bind(\"render_complete\", function () {\n// \t\t\tme.refresh();\n// \t\t});\n// \t}\n\n// \tsetup_help() {\n// \t\tvar me = this;\n// \t\tthis.frm.page.add_action_item(\n// \t\t\t__(\"Help\"),\n// \t\t\tfunction () {\n// \t\t\t\tfrappe.workflow.setup(me.frm.doctype);\n// \t\t\t\tvar state = me.get_state();\n// \t\t\t\tvar d = new frappe.ui.Dialog({\n// \t\t\t\t\ttitle: \"Workflow: \" + frappe.workflow.workflows[me.frm.doctype].name,\n// \t\t\t\t});\n\n// \t\t\t\tfrappe.workflow.get_transitions(me.frm.doc).then((transitions) => {\n// \t\t\t\t\tconst next_actions =\n// \t\t\t\t\t\t$.map(\n// \t\t\t\t\t\t\ttransitions,\n// \t\t\t\t\t\t\t(d) => `${d.action.bold()} ${__(\"by Role\")} ${d.allowed}`\n// \t\t\t\t\t\t).join(\", \") || __(\"None: End of Workflow\").bold();\n\n// \t\t\t\t\tconst document_editable_by = frappe.workflow\n// \t\t\t\t\t\t.get_document_state_roles(me.frm.doctype, state)\n// \t\t\t\t\t\t.map((role) => role.bold())\n// \t\t\t\t\t\t.join(\", \");\n\n// \t\t\t\t\t$(d.body)\n// \t\t\t\t\t\t.html(\n// \t\t\t\t\t\t\t`\n// \t\t\t\t\t<p>${__(\"Current status\")}: ${state.bold()}</p>\n// \t\t\t\t\t<p>${__(\"Document is only editable by users with role\")}: ${document_editable_by}</p>\n// \t\t\t\t\t<p>${__(\"Next actions\")}: ${next_actions}</p>\n// \t\t\t\t\t<p>${__(\"{0}: Other permission rules may also apply\", [__(\"Note\").bold()])}</p>\n// \t\t\t\t`\n// \t\t\t\t\t\t)\n// \t\t\t\t\t\t.css({ padding: \"15px\" });\n\n// \t\t\t\t\td.show();\n// \t\t\t\t});\n// \t\t\t},\n// \t\t\ttrue\n// \t\t);\n// \t}\n\n// \trefresh() {\n// \t\t// hide if its not yet saved\n// \t\tif (this.frm.doc.__islocal) {\n// \t\t\tthis.set_default_state();\n// \t\t\treturn;\n// \t\t}\n\n// \t\t// state text\n// \t\tconst state = this.get_state();\n\n// \t\tif (state) {\n// \t\t\t// show actions from that state\n// \t\t\tthis.show_actions(state);\n// \t\t}\n// \t}\n\n// \tshow_actions() {\n// \t\tvar added = false;\n// \t\tvar me = this;\n\n// \t\t// if the loaded doc is dirty, don't show workflow buttons\n// \t\tif (this.frm.doc.__unsaved === 1) {\n// \t\t\treturn;\n// \t\t}\n\n// \t\tfunction has_approval_access(transition) {\n// \t\t\tlet approval_access = false;\n// \t\t\tconst user = frappe.session.user;\n// \t\t\tif (\n// \t\t\t\tuser === \"Administrator\" ||\n// \t\t\t\ttransition.allow_self_approval ||\n// \t\t\t\tuser !== me.frm.doc.owner\n// \t\t\t) {\n// \t\t\t\tapproval_access = true;\n// \t\t\t}\n// \t\t\treturn approval_access;\n// \t\t}\n\n// \t\tfrappe.workflow.get_transitions(this.frm.doc).then((transitions) => {\n// \t\t\tthis.frm.page.clear_actions_menu();\n// \t\t\ttransitions.forEach((d) => {\n// \t\t\t\tif (frappe.user_roles.includes(d.allowed) && has_approval_access(d)) {\n// \t\t\t\t\tadded = true;\n// \t\t\t\t\tme.frm.page.add_action_item(__(d.action), function () {\n// \t\t\t\t\t\t// set the workflow_action for use in form scripts\n// \t\t\t\t\t\tfrappe.dom.freeze();\n// \t\t\t\t\t\tme.frm.selected_workflow_action = d.action;\n// \t\t\t\t\t\tme.frm.script_manager.trigger(\"before_workflow_action\").then(() => {\n// \t\t\t\t\t\t\tfrappe\n// \t\t\t\t\t\t\t\t.xcall(\"frappe.model.workflow.apply_workflow\", {\n// \t\t\t\t\t\t\t\t\tdoc: me.frm.doc,\n// \t\t\t\t\t\t\t\t\taction: d.action,\n// \t\t\t\t\t\t\t\t})\n// \t\t\t\t\t\t\t\t.then((doc) => {\n// \t\t\t\t\t\t\t\t\tfrappe.model.sync(doc);\n// \t\t\t\t\t\t\t\t\tme.frm.refresh();\n// \t\t\t\t\t\t\t\t\tme.frm.selected_workflow_action = null;\n// \t\t\t\t\t\t\t\t\tme.frm.script_manager.trigger(\"after_workflow_action\");\n// \t\t\t\t\t\t\t\t})\n// \t\t\t\t\t\t\t\t.finally(() => {\n// \t\t\t\t\t\t\t\t\tfrappe.dom.unfreeze();\n// \t\t\t\t\t\t\t\t});\n// \t\t\t\t\t\t});\n// \t\t\t\t\t});\n// \t\t\t\t}\n// \t\t\t});\n\n// \t\t\tthis.setup_btn(added);\n// \t\t});\n// \t}\n\n// \tsetup_btn(action_added) {\n// \t\tif (action_added) {\n// \t\t\tthis.frm.page.btn_primary.addClass(\"hide\");\n// \t\t\tthis.frm.page.btn_secondary.addClass(\"hide\");\n// \t\t\tthis.frm.toolbar.current_status = \"\";\n// \t\t\tthis.setup_help();\n// \t\t}\n// \t}\n\n// \tset_default_state() {\n// \t\tvar default_state = frappe.workflow.get_default_state(\n// \t\t\tthis.frm.doctype,\n// \t\t\tthis.frm.doc.docstatus\n// \t\t);\n// \t\tif (default_state) {\n// \t\t\tthis.frm.set_value(this.state_fieldname, default_state);\n// \t\t}\n// \t}\n\n// \tget_state() {\n// \t\tif (!this.frm.doc[this.state_fieldname]) {\n// \t\t\tthis.set_default_state();\n// \t\t}\n// \t\treturn this.frm.doc[this.state_fieldname];\n// \t}", "frappe.ui.ThemeSwitcher = class CustomThemeSwitcher extends frappe.ui.ThemeSwitcher {\n\tconstructor() {\n\t\tsuper()\n\t}\n\n\tfetch_themes() {\n\t\tconsole.log('tested');\n\t\treturn new Promise((resolve) => {\n\t\t\tthis.themes = [\n\t\t\t\t{\n\t\t\t\t\tname: \"light\",\n\t\t\t\t\tlabel: (\"Frappe Light\"),\n\t\t\t\t\tinfo: (\"Light Theme\"),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"modern_ui_theme\",\n\t\t\t\t\tlabel: \"Maze UI\",\n\t\t\t\t\tinfo: \"Custom Theme\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"automatic\",\n\t\t\t\t\tlabel: \"Automatic\",\n\t\t\t\t\tinfo: \"Uses system's theme to switch between light and dark mode\",\n\t\t\t\t}\n\t\t\t];\n\n\t\t\tresolve(this.themes);\n\t\t});\n\t}\n}\n", "frappe.templates[\"navbar\"] = `<div class=\"sticky-top\">\n<div class=\"fixed_sidebar\"></div>\n<header class=\"navbar navbar-expand\" role=\"navigation\">\n    <div class=\"container\">\n        <a class=\"navbar-brand navbar-home\" href=\"/app\">\n            <img\n                class=\"app-logo\"\n                src=\"{{ frappe.boot.app_logo_url }}\"\n                alt=\"{{ __(\"App Logo\") }}\"\n            >\n        </a>\n        <ul class=\"nav navbar-nav d-none d-sm-flex\" id=\"navbar-breadcrumbs\"></ul>\n        <div class=\"collapse navbar-collapse justify-content-end\">\n            <form class=\"form-inline fill-width justify-content-end\" role=\"search\" onsubmit=\"return false;\">\n                {% if (frappe.boot.read_only) { %}\n                    <span class=\"indicator-pill yellow no-indicator-dot\" title=\"{%= __(\"Your site is undergoing maintenance or being updated.\") %}\">\n                        {%= __(\"Read Only Mode\") %}\n                    </span>\n                {% } %}\n                {% if (frappe.boot.user.impersonated_by) { %}\n                    <span class=\"indicator-pill red no-indicator-dot\" title=\"{%= __(\"You are impersonating as another user.\") %}\">\n                        {%= __(\"Impersonating {0}\", [frappe.boot.user.name]) %}\n                    </span>\n                {% } %}\n                <div class=\"input-group search-bar text-muted hidden\">\n                    <input\n                        id=\"navbar-search\"\n                        type=\"text\"\n                        class=\"form-control\"\n                        placeholder=\"{%= __('Search or type a command ({0})', [frappe.utils.is_mac() ? '\\u2318 + G' : 'Ctrl + G']) %}\"\n                        aria-haspopup=\"true\"\n                    >\n                    <span class=\"search-icon\">\n                        <svg class=\"icon icon-sm\"><use href=\"#icon-search\"></use></svg>\n                    </span>\n                </div>\n            </form>\n            <ul class=\"navbar-nav\">\n                <li class=\"nav-item dropdown dropdown-notifications dropdown-mobile hidden\">\n                    <button\n                        class=\"btn-reset nav-link notifications-icon text-muted\"\n                        data-toggle=\"dropdown\"\n                        aria-haspopup=\"true\"\n                        aria-expanded=\"false\"\n                    >\n                        <span class=\"notifications-seen\">\n                            <span class=\"sr-only\">{{ __(\"No new notifications\") }}</span>\n                            <svg class=\"es-icon icon-sm\" style=\"stroke:none;\"><use href=\"#es-line-notifications\"></use></svg>\n                        </span>\n                        <span class=\"notifications-unseen\">\n                            <span class=\"sr-only\">{{ __(\"You have unseen notifications\") }}</span>\n                            <svg class=\"es-icon icon-sm\"><use href=\"#es-line-notifications-unseen\"></use></svg>\n                        </span>\n                    </button>\n                    <div class=\"dropdown-menu notifications-list dropdown-menu-right\" role=\"menu\">\n                        <div class=\"notification-list-header\">\n                            <div class=\"header-items\"></div>\n                            <div class=\"header-actions\"></div>\n                        </div>\n                        <div class=\"notification-list-body\">\n                            <div class=\"panel-notifications\"></div>\n                            <div class=\"panel-events\"></div>\n                            <div class=\"panel-changelog-feed\"></div>\n                        </div>\n                    </div>\n                </li>\n                <li class=\"nav-item dropdown dropdown-message dropdown-mobile hidden\">\n                    <button\n                        class=\"btn-reset nav-link notifications-icon text-muted\"\n                        data-toggle=\"dropdown\"\n                        aria-haspopup=\"true\"\n                        aria-expanded=\"true\"\n                    >\n                        <span>\n                            <svg class=\"es-icon icon-sm\"><use href=\"#es-line-chat-alt\"></use></svg>\n                        </span>\n                    </button>\n                </li>\n                <li class=\"vertical-bar d-none d-sm-block\"></li>\n                <li class=\"nav-item dropdown dropdown-help dropdown-mobile d-none d-lg-block\">\n                    <button\n                        class=\"btn-reset nav-link\"\n                        data-toggle=\"dropdown\"\n                        aria-controls=\"toolbar-help\"\n                        aria-label=\"{{ __(\"Help Dropdown\") }}\"\n                    >\n                        <span>\n                            {{ __(\"Help\") }}\n                            <svg class=\"es-icon icon-xs\"><use href=\"#es-line-down\"></use></svg>\n                        </span>\n                    </button>\n                    <div class=\"dropdown-menu dropdown-menu-right\" id=\"toolbar-help\" role=\"menu\">\n                        <div id=\"help-links\"></div>\n                        <div class=\"dropdown-divider documentation-links\"></div>\n                        {% for item in navbar_settings.help_dropdown %}\n                            {% if (!item.hidden) { %}\n                                {% if (item.route) { %}\n                                    <a class=\"dropdown-item\" href=\"{{ item.route }}\">\n                                        {%= __(item.item_label) %}\n                                    </a>\n                                {% } else if (item.action) { %}\n                                    <button class=\"btn-reset dropdown-item\" onclick=\"return {{ item.action }}\">\n                                        {%= __(item.item_label) %}\n                                    </button>\n                                {% } else { %}\n                                    <div class=\"dropdown-divider\"></div>\n                                {% } %}\n                            {% } %}\n                        {% endfor %}\n                    </div>\n                </li>\n                <li class=\"nav-item dropdown dropdown-navbar-user dropdown-mobile\">\n            \n                <div class=\"dv-user-info\">\n                <p class=\"user-name\"></p>\n                </div>\n\n                </li>\n                <li class=\"nav-item dropdown dropdown-navbar-user dropdown-mobile\">\n                \n                    <button\n                        class=\"btn-reset nav-link\"\n                        data-toggle=\"dropdown\"\n                        aria-label=\"{{ __(\"User Menu\") }}\"\n                    >\n                        {{ avatar }}\n                    </button>\n                    <div class=\"dropdown-menu dropdown-menu-right\" id=\"toolbar-user\" role=\"menu\">\n                        {% for item in navbar_settings.settings_dropdown %}\n                            {% if (!item.hidden) { %}\n                                {% if (item.route) { %}\n                                    <a class=\"dropdown-item\" href=\"{{ item.route }}\">\n                                        {%= __(item.item_label) %}\n                                    </a>\n                                {% } else if (item.action) { %}\n                                    <button class=\"btn-reset dropdown-item\" onclick=\"return {{ item.action }}\">\n                                        {%= __(item.item_label) %}\n                                    </button>\n                                {% } else { %}\n                                    <div class=\"dropdown-divider\"></div>\n                                {% } %}\n                            {% } %}\n                        {% endfor %}\n                    </div>\n                </li>\n            </ul>\n        </div>\n    </div>\n</header>\n\n{% if !localStorage.getItem(\"dismissed_announcement_widget\") && strip_html(navbar_settings.announcement_widget) != '' %}\n<div class=\"announcement-widget form-message p-2 m-0\" style=\"position: relative; z-index: -1; border-radius: 0; background-color: var(--bg-blue);\">\n    <div class=\"container flex justify-between align-center mx-auto\">\n        {{ navbar_settings.announcement_widget }}\n        <div class=\"close-message p-0 mr-2\" style=\"position: relative;\">\n        {{ frappe.utils.icon(\"close\") }}\n        </div>\n    </div>\n</div>\n{% endif %}\n\n</div>\n`;\n\n\n\n\nfrappe.ui.toolbar.Toolbar = class CustomSidebar extends frappe.ui.toolbar.Toolbar {\n    constructor(wrapper) {\n        // Call the parent class constructor with the wrapper\n        super(wrapper);\n        // User Information Logic\n        const user = frappe.get_cookies();\n        const userNameElement = document.querySelector('.user-name');\n        const userStatusElement = document.querySelector('.user-status');\n        const userData = frappe.get_cookies();\n\n        frappe.db.get_value('User', userData.user_id, 'user_type', function(response) {\n            let user_type = '';\n            if (userData.user_id === 'Administrator') {\n                user_type = __('Administrator');\n            } else {\n                user_type = response.user_type ? __(response.user_type) : __('User');\n            }\n            userNameElement.textContent = user.full_name || 'Guest';  // Assuming full_name is available in cookies\n            // userStatusElement.textContent = user_type\n        });\n\n        // You can call additional methods or initialize extra functionality here if needed\n        // e.g., super.setup_pages();\n        this.add_custom_sidebar();\n    }\n\n    // Override the get_pages method\n    add_custom_sidebar() {\n        var targetElement = $('.fixed_sidebar');\n        this.sidebar = $(this.custom_sidebar_html()).appendTo(targetElement);\n       \n        let arrow = document.querySelectorAll(\".arrow\");\n\t\tfor (var i = 0; i < arrow.length; i++) {\n \t\t    arrow[i].addEventListener(\"click\", (e)=>{\n \t\t        let arrowParent = e.target.parentElement.parentElement;//selecting main parent of arrow\n \t\t        arrowParent.classList.toggle(\"showMenu\");\n            });\n        }\n    }\n    custom_sidebar_html() {\n\n\t\tvar sb =`\n\t\t<div class=\"sidebar\">\n        <button class=\"toggle-btn\">\u2630</button>\n        <ul class=\"nav-links\">`\n\n\t\t// console.log(frappe.boot.get_doctypes);\n\t\t$.each(frappe.boot.custom_workspace.pages,  function(i,  item) {\n\t\t\tsb +=`<li>\n\t\t\t\t<div class=\"icon-link\">\n                <div class=\"sidebar-title\">\n\t\t\t\t<a href=\"/app/${\n\t\t\t\t\t\titem.public\n\t\t\t\t\t\t? frappe.router.slug(item.title)\n\t\t\t\t\t\t: \"private/\" + frappe.router.slug(item.title)\n\t\t\t\t}\">\n\t\t\t\t\t<i class='${__(item.custom_custom_icon)}'style=\"color: #FFD43B;\"></i>\n\t\t\t\t\t<span class=\"link_name\">${__(item.title)}</span>\n\t\t\t\t  </a>\n                </div>` \n\t\t\t\tif(item.submenu){\n\t\t\t\tsb +=`<i class='fa fa-chevron-down arrow' style=\"min-width: 40px;\"></i>` \n\t\t\t\t}\n        \t\tsb +=`</div>` + item.submenu + `</li>`\n\t\t})\n\t\tsb +=`</ul></div>`\n\n        return sb;\n\t\t\n\t}\n};\n", "frappe.ui.toolbar.Toolbar = class Toolbar extends frappe.ui.toolbar.Toolbar {\n    constructor() {\n        super();\n        this.languageList = null;\n        this.fetchLanguages();\n    }\n\n    fetchLanguages() {\n        // Fetch the language list from the server and store it\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Language',\n                fields: ['language_name', 'language_code'],\n                filters: {\n                    'language_code': ['in', ['en', 'ta']] },\n                limit_page_length: 0\n            },\n            callback: (r) => {\n                if (r.message) {\n                    this.languageList = r.message;\n                    this.make();\n                }\n            }\n        });\n    }\n\n    make() {\n        super.make();\n        // Only proceed if languageList is populated and the dropdown doesn't exist yet\n        if (this.languageList && $('#languageDropdown').length === 0) {\n            this.add_custom_button();\n        }\n    }\n\n    add_custom_button() {\n        // Only append the new dropdown HTML if it does not already exist\n        if ($('#languageDropdown').length === 0) {\n            // Create the dropdown HTML with dynamic language list\n            const dropdownHtml = $(`\n                <div class=\"dropdown\">\n                    <button class=\"dropbtn\">Select Language</button>\n                    <ul class=\"dropdown-content\" id=\"languageDropdown\"></ul>\n                </div>\n            `);\n\n            // Append the dropdown to the navbar\n            $('.navbar .dropdown').first().before(dropdownHtml);\n        }\n\n        // Populate the dropdown with languages only if it's empty\n        if ($('#languageDropdown').is(':empty')) {\n            let listItemsHtml = this.languageList.map(language =>\n                `<li data-lang-code=\"${language.language_code}\">${language.language_name}-${language.language_code}</li>`\n            ).join('');\n\n            // Append list items to the dropdown\n            $('#languageDropdown').html(listItemsHtml);\n        }\n\n        // Event delegation for the dropdown list items\n        $('#languageDropdown').on('click', 'li', (event) => {\n            const languageCode = $(event.currentTarget).data('lang-code');\n            this.set_language(languageCode);\n            $('#languageDropdown').removeClass('show');\n        });\n\n        // Event handler for the dropdown button\n        $('.dropbtn').click(function (event) {\n            event.stopPropagation();\n            $('#languageDropdown').toggleClass('show');\n        });\n    }\n\n    set_language(languageCode) {\n        // Show the loading overlay\n        this.showLoadingOverlay();\n        let totalSteps = 1;\n        frappe.show_progress('Changing Language', 0, totalSteps, 'Initializing...');\n        // Debounce the server call if necessary, and then change the language\n        frappe.call({\n            method: 'frappe.client.set_value',\n            args: {\n                doctype: 'User',\n                name: frappe.session.user,\n                fieldname: 'language',\n                value: languageCode\n            },\n            callback: (response) => {\n                // Hide the loading overlay\n                this.hideLoadingOverlay();\n\n                if (!response.exc) {\n                    frappe.show_progress('Changing Language', totalSteps, totalSteps, 'Language changed successfully.');\n                    let gifUrl = \"https://media4.giphy.com/media/v1.Y2lkPTc5MGI3NjExejRwNnIydGNoemkyc2p0OWh0cTI3ODZjajlvN2hyZ3duNm5peW5oNCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9cw/MXpEsbeaALaVOxXEtu/giphy.gif\";\n                    frappe.msgprint({\n                        message: `<img src=\"${gifUrl}\" alt=\"Success Animation\" style=\"width: 200px; height: 200px;\" /> Server-side action completed!`,\n                        indicator: 'green'\n                    })\n                // Reload after a short delay to allow the user to see the message\n                setTimeout(() => {\n                    location.reload();\n                }, 2000); } else {\n                        console.error(\"Error changing user language:\", response.exc);\n                    }\n                }\n        });\n    }\n\n    // Function to show the loading overlay\n    showLoadingOverlay() {\n        $('#loadingOverlay').show();\n    }\n\n    // Function to hide the loading overlay\n    hideLoadingOverlay() {\n        $('#loadingOverlay').hide();\n    }\n}\n\n// Close the dropdown when clicking outside of it\n$(document).click(function (event) {\n    if (!$(event.target).closest('.dropdown').length) {\n        $('#languageDropdown').removeClass('show');\n    }\n});\n\n$(document).ready(function () {\n    new frappe.ui.toolbar.Toolbar();\n    // Add the loading overlay to the DOM if it doesn't already exist\n    if ($('#loadingOverlay').length === 0) {\n        $('body').append('<div id=\"loadingOverlay\" style=\"display: none; position: fixed; width: 100%; height: 100%; top: 0; left: 0; background-color: rgba(0,0,0,0.5); z-index: 9999;\"><div>Loading...</div></div>');\n    }\n});"],
  "mappings": "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",
  "names": ["i", "doctype", "listview", "doctypes", "i", "doctype", "frm", "updateOrAddHelpBoxForErrors", "errorFields", "field", "wrapper", "helpBox", "WorkflowOverride", "added", "me", "has_approval_access", "transition", "approval_access", "user", "transitions", "d", "resolve", "wrapper", "user", "userNameElement", "userStatusElement", "userData", "response", "user_type", "targetElement", "arrow", "i", "e", "sb", "item", "r", "dropdownHtml", "listItemsHtml", "language", "event", "languageCode", "totalSteps", "response", "gifUrl"]
}
